<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_moved = false
player_dashed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// don't ask me how this works

//top left
view_x = obj_camera.x - (view_wview[0] / 2)
view_y = obj_camera.y - (view_hview[0] / 2) + obj_camera.shake_offset

// center
center_x = view_x + (view_wview[0] / 2)
center_y = view_y + (view_hview[0] / 2)


padding = 50

// minimap
mmap_scale = 0.07
mmap_x = view_x + view_wview[0] - (room_width * mmap_scale) - padding
mmap_y = view_y + view_hview[0] - (room_height * mmap_scale) - padding

draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_set_colour(c_white)
draw_set_font(fnt_kenvector_future)


// draw minimap
draw_rectangle(mmap_x, mmap_y, mmap_x + room_width * mmap_scale, mmap_y + room_height * mmap_scale, 1)
view_rect[3] = mmap_y + (view_y + view_hview[0]) * mmap_scale
view_rect[2] = mmap_x + (view_x + view_wview[0]) * mmap_scale
view_rect[1] = mmap_y + view_y * mmap_scale
view_rect[0] = mmap_x + view_x * mmap_scale
draw_rectangle(view_rect[0], view_rect[1], view_rect[2], view_rect[3], 1)

// draw player on minimap
draw_mmap_obj(obj_player)

// draw enemies on minimap
draw_set_colour(c_red)
draw_all_mmap_obj(obj_enemy_parent)

// draw meteors on minimap
draw_set_colour(c_orange)
draw_all_mmap_obj(obj_meteor_parent)

// draw powerups on minimap
draw_set_colour(c_white)
draw_all_mmap_obj(obj_powerup_parent)


// draw offscreen enemy indicator
for (i = 0; i &lt; instance_number(obj_enemy_parent); i++) {
    enemy = instance_find(obj_enemy_parent, i)
    if (!within_view(enemy.x, enemy.y, enemy.sprite_width)) {
        arrow_rot = point_direction(enemy.x, enemy.y, obj_player.x, obj_player.y) - 180
        ex = clamp(enemy.x, view_x + (padding * 2), view_x + view_wview[0] - (padding * 2))
        ey = clamp(enemy.y, view_y + (padding * 2), view_y + view_hview[0] - (padding * 2))
        draw_sprite_ext(spr_arrow, 0, ex, ey, 1, 1, arrow_rot, enemy.colour, 1)
    }
}

// point to enemy if camera is "focused"
if (obj_camera.focus) {
    closest = closest_enemy(obj_cursor)
    if (instance_number(obj_enemy_parent) != 0 and within_view(closest.x, closest.y, view_hview[0] / 4)) {
        draw_sprite_ext(spr_point, 0, closest.x, closest.y - 100, 1, 1, 0, closest.colour, 1)
    }
}


// draw life sprite
life_x = view_x + padding
life_y = view_y + view_hview[0] - padding
draw_sprite(spr_life_blue_1, 0, life_x, life_y)

// draw score and lives
draw_text(view_x + padding, view_y + padding, global.game_score)
draw_text(life_x + 32, life_y - 18, obj_player.hit_points)


draw_set_halign(fa_center)

// how to play (tutorial) text
player_moved = player_moved or obj_player.ax != 0 or obj_player.ay != 0
player_dashed = player_dashed or obj_player.DASH

if (!player_moved) {
    draw_text_transformed(center_x, center_y + 200, "WASD TO MOVE", 0.7, 0.7, 0)
}
else if (!player_dashed) {
    draw_text_transformed(center_x, center_y + 200, "SPACEBAR TO DASH", 0.7, 0.7, 0)
}

// draw ufo healthbar and minimap icon
if (instance_number(obj_ufo)) {
    draw_text_transformed(center_x, view_y + padding, "MISSION: ESCORT UFO", 0.8, 0.8, 0)
    
    // draw ufo on minimap
    draw_set_colour(c_aqua)
    draw_mmap_obj(obj_ufo)
    
    // hp bar
    ufo_hp_padding = padding * 7
    ufo_hpbar[3] = view_y + (padding * 2)
    ufo_hpbar[2] = view_x + view_wview[0] - ufo_hp_padding
    ufo_hpbar[1] = ufo_hpbar[3] - 4
    ufo_hpbar[0] = view_x + ufo_hp_padding
    ufo_hp_percent = (obj_ufo.hit_points / obj_ufo.max_hit_points) * 100
    draw_healthbar(ufo_hpbar[0], ufo_hpbar[1], ufo_hpbar[2], ufo_hpbar[3], ufo_hp_percent, c_dkgray, c_aqua, c_aqua, 0, 1, 0)
}
else {
    draw_text_transformed(center_x, view_y + padding, "MISSION: STAY ALIVE", 0.8, 0.8, 0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
