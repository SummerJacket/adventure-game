<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_moved = false
player_dashed = false
player_shot = false
player_wandered = false

if (room = rm_splash or room = rm_menu) hide = 1
else hide = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// don't ask me how this works

if (keyboard_check_pressed(vk_f8)) hide = !hide

if (!hide) {
    //top left
    view_x = obj_camera.x - (view_wview[0] / 2) + obj_camera.x_shake
    view_y = obj_camera.y - (view_hview[0] / 2) + obj_camera.y_shake
    
    // center
    center_x = view_x + (view_wview[0] / 2)
    center_y = view_y + (view_hview[0] / 2)
    
    padding = 50
    
    // view border with padding
    edge[3] = view_y + view_hview[0] - padding // bottom
    edge[2] = view_x + view_wview[0] - padding // right
    edge[1] = view_y + padding // top
    edge[0] = view_x + padding // left
    
    // minimap
    mmap_scale = 0.065
    mmap_x = view_x + view_wview[0] - (room_width * mmap_scale) - padding
    mmap_y = view_y + view_hview[0] - (room_height * mmap_scale) - padding
    
    // text size
    tutortext_size = 0.7
    missiontext_size = 0.8
    
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_colour(c_white)
    draw_set_font(fnt_kenvector_future)
    
    
    // draw minimap
    mmap_x2 = mmap_x + room_width * mmap_scale
    mmap_y2 = mmap_y + room_height * mmap_scale
    draw_rectangle(mmap_x, mmap_y, mmap_x2, mmap_y2, 1)
    view_rect[3] = mmap_y + (view_y + view_hview[0]) * mmap_scale // bottom
    view_rect[2] = mmap_x + (view_x + view_wview[0]) * mmap_scale // right
    view_rect[1] = mmap_y + view_y * mmap_scale // top
    view_rect[0] = mmap_x + view_x * mmap_scale // left
    draw_rectangle(view_rect[0], view_rect[1], view_rect[2], view_rect[3], 1)
    
    // draw player on minimap
    draw_mmap_obj(obj_player)
    
    // draw enemies on minimap
    draw_set_colour(c_red)
    draw_all_mmap_obj(obj_enemy_parent)
    
    // draw meteors on minimap
    draw_set_colour(c_orange)
    draw_all_mmap_obj(obj_meteor_parent)
    
    // draw powerups on minimap
    draw_set_colour(c_white)
    draw_all_mmap_obj(obj_powerup_parent)
    
    
    // draw offscreen enemy indicator
    for (i = 0; i &lt; instance_number(obj_enemy_parent); i++) {
        enemy = instance_find(obj_enemy_parent, i)
        if (!within_view(enemy.x, enemy.y, enemy.sprite_width)) {
            arrow_rot = point_direction(enemy.x, enemy.y, obj_player.x, obj_player.y) - 180
            offscr_left = view_x + (padding * 2)
            offscr_right = view_x + view_wview[0] - (padding * 2)
            offscr_top = view_y + (padding * 2)
            offscr_bot = view_y + view_hview[0] - (padding * 2)
            ex = clamp(enemy.x, offscr_left, offscr_right)
            ey = clamp(enemy.y, offscr_top, offscr_bot)
            draw_sprite_ext(spr_arrow, 0, ex, ey, 1, 1, arrow_rot, enemy.colour, 1)
        }
    }
    
    
    // point to enemy if camera is "focused"
    with (obj_camera) {
        if (focus and closest and can_focus()) {
            draw_sprite_ext(spr_point, 0, closest.x, closest.y - 60, 1, 1, 0, closest.colour, 1)
        }
    }
    
    
    // draw life sprite
    draw_sprite(spr_life_blue_1, 0, edge[0], edge[3])
    
    // hud text
    draw_text_transformed(edge[0], edge[1], "SCORE: " + string(global.game_score), tutortext_size, tutortext_size, 0)
    draw_text(edge[0] + 32, edge[3] - 18, obj_player.hit_points)
    draw_set_halign(fa_right)
    draw_text_transformed(edge[2], edge[1], "ELIMINATIONS: " + string(obj_player.kills), tutortext_size, tutortext_size, 0)
    
    // how to play (tutorial) text
    player_moved = player_moved or obj_player.ax != 0 or obj_player.ay != 0
    player_dashed = player_dashed or obj_player.DASH
    player_shot = player_shot or obj_player.SHOOTING
    player_wandered = !instance_number(obj_ufo) or player_wandered or obj_player.wander
    
    if (!player_moved) tutorial_text = "WASD TO MOVE"
    else if (!player_shot) tutorial_text = "LEFT MOUSE TO SHOOT"
    else if (!player_dashed) tutorial_text = "SPACEBAR TO DASH"
    else if (!player_wandered) tutorial_text = "STAY NEAR THE UFO"
    else tutorial_text = ""
    
    draw_set_halign(fa_center)
    draw_text_transformed(center_x, center_y + 200, tutorial_text, tutortext_size, tutortext_size, 0)
    
    
    // draw the mission title and healthbar
    if (room = rm_survival) mission_text = "MISSION: STAY ALIVE"
    else {
        top_hp_padding = padding * 7
        top_hpbar[3] = view_y + (padding * 2)                  // bottom
        top_hpbar[2] = view_x + view_wview[0] - top_hp_padding // right
        top_hpbar[1] = top_hpbar[3] - 4        // top
        top_hpbar[0] = view_x + top_hp_padding // left
        
        if (room = rm_duel) {
            mission_text = "MISSION: DEFEAT ENEMY"
            top_colour = c_red
            top_obj = obj_boss
            
        }
        else if (room = rm_defence) {
            mission_text = "MISSION: ESCORT UFO"
            top_colour = c_aqua
            top_obj = obj_ufo
        }
        
        draw_set_color(top_colour)
        draw_mmap_obj(top_obj)
        top_hp_percent = (top_obj.hit_points / top_obj.max_hit_points) * 100
        draw_healthbar(top_hpbar[0], top_hpbar[1], top_hpbar[2], top_hpbar[3], top_hp_percent, c_dkgray, top_colour, top_colour, 0, 1, 0)
    }
    
    draw_set_colour(c_white)
    draw_text_transformed(center_x, view_y + padding, mission_text, missiontext_size, missiontext_size, 0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
