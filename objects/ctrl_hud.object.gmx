<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// please don't look at this
// it's a mess

//top left
VIEW_X = obj_camera.x - (view_wview[0] / 2)
VIEW_Y = obj_camera.y - (view_hview[0] / 2) + obj_camera.shake_offset

// center
CENTER_X = VIEW_X + (view_wview[0] / 2)
CENTER_Y = VIEW_Y + (view_hview[0] / 2)

PADDING = 50

// score
score_x = VIEW_X + PADDING
score_y = VIEW_Y + PADDING

// lives
life_x = VIEW_X + 50
life_y = VIEW_Y + view_hview[0] - PADDING

// minimap
mmap_scale = 0.08
mmap_x = VIEW_X + view_wview[0] - (room_width * mmap_scale) - PADDING
mmap_y = VIEW_Y + view_hview[0] - (room_height * mmap_scale) - PADDING


// draw shooting and dash bar
with (obj_player) {
    if (reloading) cgun = c_green
    else cgun = c_lime
    if (can_dash = dash_max_count) cdash = c_aqua
    else cdash = c_teal
    gun_percent = ((max_gun_heat - gun_heat) / max_gun_heat) * 100
    dash_percent = (can_dash / dash_max_count) * 100
    draw_healthbar(x - 40, y + 80, x + 40, y + 84, gun_percent, c_dkgray, cgun, cgun, 0, true, false)
    draw_healthbar(x - 40, y + 87, x + 40, y + 91, dash_percent, c_dkgray, cdash, cdash, 0, true, false)
}


// draw minimap
draw_set_colour(c_white)
draw_rectangle(mmap_x, mmap_y, mmap_x + room_width * mmap_scale, mmap_y + room_height * mmap_scale, 4)
draw_rectangle(mmap_x + VIEW_X * mmap_scale,
    mmap_y + VIEW_Y * mmap_scale,
    mmap_x + (VIEW_X + view_wview[0]) * mmap_scale,
    mmap_y + (VIEW_Y + view_hview[0]) * mmap_scale,
    5)

// draw player on minimap
draw_mmap_obj(obj_player)

// draw player direction line on minimap
draw_line(mmap_x + obj_player.x * mmap_scale,
    mmap_y + obj_player.y * mmap_scale,
    mmap_x + obj_cursor.x * mmap_scale,
    mmap_y + obj_cursor.y * mmap_scale)

// draw enemies on minimap
draw_set_colour(c_red)
draw_all_mmap_obj(obj_enemy_parent)

// draw meteors on minimap
draw_set_colour(c_orange)
draw_all_mmap_obj(obj_meteor_parent)

// draw powerups on minimap
draw_set_colour(c_white)
draw_all_mmap_obj(obj_powerup_parent)


// draw offscreen enemy indicator
for (i = 0; i &lt; instance_number(obj_enemy_parent); i++) {
    enemy = instance_find(obj_enemy_parent, i)
    if (!within_view(enemy.x, enemy.y, enemy.sprite_width)) {
        arrow_rot = direction_to_player(enemy) + 90
        ex = clamp(enemy.x, VIEW_X + (PADDING * 2), VIEW_X + view_wview[0] - (PADDING * 2))
        ey = clamp(enemy.y, VIEW_Y + (PADDING * 2), VIEW_Y + view_hview[0] - (PADDING * 2))
        draw_sprite_ext(spr_lazer_red_16, 0, ex, ey, 1, 1, arrow_rot, c_white, 1)
    }
}


draw_set_halign(fa_left)
draw_set_valign(fa_top)

// draw life sprite
draw_sprite(spr_life_blue_1, 0, life_x, life_y)

draw_set_font(fnt_kenvector_future)

// draw score and lives
draw_text(score_x, score_y, "Score: " + string(global.game_score))
draw_text(life_x + 32, life_y - 18, obj_player.hit_points)

draw_set_halign(fa_center)
draw_set_valign(fa_middle)

// game over screen
if (global.game_over) {
    draw_text(CENTER_X, CENTER_Y - 100, "GAME OVER")
}
// pause screen
else if (global.paused) {
    draw_text(CENTER_X, CENTER_Y - 100, "PAUSED")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
