<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_blue_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables

vx = 0
vy = 0
ax = 0
ay = 0

upgrade_reload = false
upgrade_shooting = false
upgrade_brakes = false

gun_cooldown = 0
gun_heat = 0
max_gun_heat = 30

hit_points = 5
can_shoot = 0
dash_length = room_speed / 2
dash_max_count = room_speed * 4
can_dash = dash_max_count
ghost_count = 0
direction_towards_mouse = 0

friction_strength = 0.3
MAX_SPEED = 12
dash_speed = MAX_SPEED * 3

reloading = false
invulnerable = false
dashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dashing
dashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// blink

if (invulnerable) {
    visible = !visible
    alarm[1] = room_speed / 5
}
else visible = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// vulnerable
invulnerable = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// a bunch of stuff

if (!global.paused) {
    // user input
    UP    = keyboard_check(ord("W"))
    LEFT  = keyboard_check(ord("A"))
    DOWN  = keyboard_check(ord("S"))
    RIGHT = keyboard_check(ord("D"))
    
    DASH = keyboard_check_pressed(vk_space)
    
    SHOOTING = mouse_check_button(mb_left)
    
    direction_towards_mouse = point_direction(x, y, mouse_x, mouse_y)
    
    // cheats
    if (keyboard_check_pressed(ord("H"))) hit_points += 1
    
    // acceleration
    ax = 2 * (RIGHT - LEFT)
    ay = 2 * (DOWN - UP)
    
    // dashing
    can_dash++
    if (can_dash &gt; dash_max_count) can_dash = dash_max_count
    if (DASH and can_dash = dash_max_count) {
        dashing = true
        can_dash = 0
        shake_camera(dash_length, 10)
        alarm[2] = dash_length
    }
    
    // friction 
    // "What? In space?"
    // "Yep."
    vx -= sign(vx) * friction_strength
    vy -= sign(vy) * friction_strength
    
    // velocity
    if (dashing) {
        // the following line took 30 mins to write
        dash_direction = darctan2(-vy, vx) // nice
        
        vx = lengthdir_x(dash_speed, dash_direction)
        vy = lengthdir_y(dash_speed, dash_direction)
    }
    else {
        vx += ax
        vy += ay
    }
    
    // don't let the player move faster than max_speed
    // unless if the player is dashing
    if (!dashing) {
        vx = clamp(vx, -MAX_SPEED, MAX_SPEED)
        vy = clamp(vy, -MAX_SPEED, MAX_SPEED)
    }
    
    // apply velocity to position
    x += vx
    y += vy
    
    // player is always within the room
    x = clamp(x, 0, room_width)
    y = clamp(y, 0, room_height)
    
    // player faces the cursor
    image_angle = direction_towards_mouse - 90
    
    // create a trail if the player is dashing
    if (dashing) ghost_trail(1)
    
    // reload
    if (gun_heat = max_gun_heat and !reloading) reloading = true
    else if (gun_heat = 0 and reloading) reloading = false
    
    // shooting
    can_shoot++
    if (!reloading) {
        if (!SHOOTING) gun_cooldown_rate(2)
        else if (can_shoot &gt; 1) {
            can_shoot = 0
            shake_camera(1, 1)
            gun_heat++
            rand_offset = irandom_range(-12, 12)
            l = instance_create(x, y, obj_lazer_player)
            l.direction = image_angle + 90 + rand_offset
            l.image_angle = image_angle + rand_offset
            audio_play_sound(sfx_lazer1, 0, false)
        }
    }
    else gun_cooldown_rate(1)

} //end if (!global.paused)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

// shooting and dashing bar
if (reloading) cgun = c_green
else cgun = c_lime
if (can_dash = dash_max_count) cdash = c_aqua
else cdash = c_teal

gun_percent = ((max_gun_heat - gun_heat) / max_gun_heat) * 100
dash_percent = (can_dash / dash_max_count) * 100

draw_healthbar(x - 40, y + 80, x + 40, y + 84, gun_percent, c_dkgray, cgun, cgun, 0, 1, 0)
draw_healthbar(x - 40, y + 87, x + 40, y + 91, dash_percent, c_dkgray, cdash, cdash, 0, 1, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
